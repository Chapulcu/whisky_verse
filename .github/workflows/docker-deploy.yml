name: üê≥ Docker Build & Deploy [DISABLED]

# TEMPORARILY DISABLED - Only enable when needed for production deployment
on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (only use on main/develop)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'
  # push:
  #   branches: 
  #     - main
  #     - develop
  #   tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üß™ Run tests (if any)
      run: |
        if [ -f "package.json" ] && npm run test --if-present; then
          echo "Tests passed"
        else
          echo "No tests found, skipping"
        fi

    - name: üèóÔ∏è Build application
      run: |
        echo "Building application for production..."
        if [ -z "$VITE_SUPABASE_URL" ]; then
          echo "Warning: VITE_SUPABASE_URL is not set, using fallback"
          export VITE_SUPABASE_URL="https://example.supabase.co"
        fi
        if [ -z "$VITE_SUPABASE_ANON_KEY" ]; then
          echo "Warning: VITE_SUPABASE_ANON_KEY is not set, using fallback"
          export VITE_SUPABASE_ANON_KEY="example-anon-key"
        fi
        npm run build
      env:
        NODE_ENV: production
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  # Build and push Docker image
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL || 'https://example.supabase.co' }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY || 'example-anon-key' }}

  # Deploy to Railway (if enabled)
  deploy-railway:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
    - name: üöÄ Deploy to Railway
      if: ${{ secrets.RAILWAY_TOKEN }}
      uses: railway/deploy@v3
      with:
        token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_ID }}

  # Deploy to DigitalOcean App Platform (if enabled)
  deploy-digitalocean:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üåä Deploy to DigitalOcean App Platform
      if: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      uses: digitalocean/app_action@v1
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        app_spec_location: .do/app.yaml

  # Deploy to Google Cloud Run (if enabled)
  deploy-gcp:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîê Setup Google Cloud CLI
      if: ${{ secrets.GCP_SA_KEY }}
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: ‚òÅÔ∏è Deploy to Cloud Run
      if: ${{ secrets.GCP_SA_KEY }}
      run: |
        gcloud run deploy whiskyverse \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --region europe-west1 \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --set-env-vars VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
          --set-env-vars VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: üìä Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification
  notify:
    if: always()
    needs: [build-and-test, docker-build-push, deploy-railway, deploy-digitalocean, deploy-gcp]
    runs-on: ubuntu-latest
    steps:
    - name: üì¢ Send notification
      if: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        STATUS="${{ job.status }}"
        if [ "$STATUS" = "success" ]; then
          EMOJI="‚úÖ"
          COLOR="good"
        else
          EMOJI="‚ùå"
          COLOR="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$EMOJI WhiskyVerse Deployment $STATUS\", \"color\":\"$COLOR\"}" \
          ${{ secrets.SLACK_WEBHOOK }}